{"version":3,"sources":["chordListComponents/BasicChordList.js","chordListComponents/ChordListsManager.js","App.js","serviceWorker.js","index.js"],"names":["BasicChordList","props","totalData","jsonData","loadedInstrument","main","loadedTunings","tunings","loadedChords","chords","loadedKeys","keys","info","tudoPeloIstilo","width","instrument","strings","fretsOnChord","name","listToRender","forEach","key","push","renderedChordsInKey","positions","chord","chordToRender","frets","fingers","barres","capo","baseFret","console","log","Col","md","style","lite","Container","title","description","Row","ChordListsManager","majorChordsData","JSON","parse","stringify","majorChordsJson","majorChordList","minorChordsData","minorChordsJson","minorChordList","cagedMajorChordsData","cagedMajorChordsJson","cagedMajorChordList","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qsGA4DeA,MAtDf,SAAwBC,GACtB,IAAMC,EAAYD,EAAME,SAClBC,EAAmBF,EAAUG,KAC7BC,EAAgBJ,EAAUK,QAC1BC,EAAeN,EAAUO,OACzBC,EAAaR,EAAUS,KACvBC,EAAOV,EAAUU,KACjBC,EAAiB,CACrBC,MAAO,OAEHC,EAAa,CACjBC,QAASZ,EAAiBY,QAC1BC,aAAcb,EAAiBa,aAC/BC,KAAMd,EAAiBc,KACvBP,KAAMD,EACNH,QAASD,GAGPa,EAAe,GA2BnB,OA1BAT,EAAWU,SAAQ,SAACC,GAClBF,EAAaG,KAAK,4BAAKD,EAAL,WAClB,IAAIE,EAAsB,GAC1Bf,EAAaa,GAAK,GAAGG,UAAUJ,SAAQ,SAACK,GACtC,IAAMC,EAAgB,CACpBC,MAAOF,EAAME,MACbC,QAASH,EAAMG,QACfC,OAAQJ,EAAMI,OACdC,KAAML,EAAMK,KACZC,SAAUN,EAAMM,UAElBC,QAAQC,IAAIP,GACZM,QAAQC,IAAIV,GACZA,EAAoBD,KAClB,kBAACY,EAAA,EAAD,CAAKC,GAAI,EAAGC,MAAOvB,GACjB,kBAAC,IAAD,CACEY,MAAOC,EACPX,WAAYA,EACZsB,MApBG,SAyBXlB,EAAaG,KAAKC,MAIlB,kBAACe,EAAA,EAAD,KACE,4BAAK1B,EAAK2B,OACV,2BAAI3B,EAAK4B,aACT,kBAACC,EAAA,EAAD,KAAMtB,K,wBCxBGuB,MAzBf,WACE,IAAMC,EAAkBC,KAAKC,MAAMD,KAAKE,UAAUC,IAC5CC,EACJ,kBAAC,EAAD,CAAgB7C,SAAUwC,IAGtBM,EAAkBL,KAAKC,MAAMD,KAAKE,UAAUI,IAC5CC,EACJ,kBAAC,EAAD,CAAgBhD,SAAU8C,IAGtBG,EAAuBR,KAAKC,MAAMD,KAAKE,UAAUO,IACjDC,EACJ,kBAAC,EAAD,CAAgBnD,SAAUiD,IAG5B,OACE,6BACGJ,EACAG,EACAG,ICXQC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,iCACA,8BACE,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.70e1784c.chunk.js","sourcesContent":["import React from 'react'\r\nimport Chord from '@tombatossals/react-chords/lib/Chord'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nfunction BasicChordList(props) {\r\n  const totalData = props.jsonData\r\n  const loadedInstrument = totalData.main\r\n  const loadedTunings = totalData.tunings\r\n  const loadedChords = totalData.chords\r\n  const loadedKeys = totalData.keys\r\n  const info = totalData.info\r\n  const tudoPeloIstilo = {\r\n    width: '20%',\r\n  }\r\n  const instrument = {\r\n    strings: loadedInstrument.strings,\r\n    fretsOnChord: loadedInstrument.fretsOnChord,\r\n    name: loadedInstrument.name,\r\n    keys: loadedKeys,\r\n    tunings: loadedTunings,\r\n  }\r\n  const lite = false // defaults to false if omitted\r\n  let listToRender = []\r\n  loadedKeys.forEach((key) => {\r\n    listToRender.push(<h4>{key} chord</h4>)\r\n    let renderedChordsInKey = []\r\n    loadedChords[key][0].positions.forEach((chord) => {\r\n      const chordToRender = {\r\n        frets: chord.frets,\r\n        fingers: chord.fingers,\r\n        barres: chord.barres,\r\n        capo: chord.capo,\r\n        baseFret: chord.baseFret,\r\n      }\r\n      console.log(chordToRender)\r\n      console.log(renderedChordsInKey)\r\n      renderedChordsInKey.push(\r\n        <Col md={3} style={tudoPeloIstilo}>\r\n          <Chord\r\n            chord={chordToRender}\r\n            instrument={instrument}\r\n            lite={lite}\r\n          ></Chord>\r\n        </Col>\r\n      )\r\n    })\r\n    listToRender.push(renderedChordsInKey)\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <h1>{info.title}</h1>\r\n      <p>{info.description}</p>\r\n      <Row>{listToRender}</Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default BasicChordList\r\n","import BasicChordList from './BasicChordList'\r\nimport React from 'react'\r\nimport majorChordsJson from './jsonChordLibs/majorChords.json'\r\nimport minorChordsJson from './jsonChordLibs/minorChords.json'\r\nimport cagedMajorChordsJson from './jsonChordLibs/cagedMajorChords.json'\r\n\r\nfunction ChordListsManager() {\r\n  const majorChordsData = JSON.parse(JSON.stringify(majorChordsJson))\r\n  const majorChordList = (\r\n    <BasicChordList jsonData={majorChordsData}></BasicChordList>\r\n  )\r\n\r\n  const minorChordsData = JSON.parse(JSON.stringify(minorChordsJson))\r\n  const minorChordList = (\r\n    <BasicChordList jsonData={minorChordsData}></BasicChordList>\r\n  )\r\n\r\n  const cagedMajorChordsData = JSON.parse(JSON.stringify(cagedMajorChordsJson))\r\n  const cagedMajorChordList = (\r\n    <BasicChordList jsonData={cagedMajorChordsData}></BasicChordList>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      {majorChordList}\r\n      {minorChordList}\r\n      {cagedMajorChordList}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChordListsManager\r\n","import React from 'react'\r\nimport './App.css'\r\nimport ChordListsManager from './chordListComponents/ChordListsManager'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header></header>\r\n      <body>\r\n        <ChordListsManager />\r\n      </body>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}