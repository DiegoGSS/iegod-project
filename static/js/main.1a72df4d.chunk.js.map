{"version":3,"sources":["chordListComponents/BasicChordList.js","chordListComponents/validators/JsonChordLibValidator.js","chordListComponents/ChordListsManager.js","App.js","serviceWorker.js","index.js"],"names":["BasicChordList","props","totalData","jsonData","loadedInstrument","main","loadedTunings","tunings","loadedChords","chords","loadedKeys","keys","info","tudoPeloIstilo","width","instrument","strings","fretsOnChord","name","listToRender","forEach","key","push","renderedChordsInKey","positions","chord","chordToRender","frets","fingers","barres","capo","baseFret","Col","md","style","lite","Container","title","description","Row","JsonChordLibValidator","jsonSchemaData","JSON","parse","stringify","schemaJson","chordLibData","chordLibJson","validate","Ajv","compile","valid","console","log","errors","ChordListsManager","majorChordsData","majorChordsJson","majorChordList","minorChordsData","minorChordsJson","minorChordList","cagedMajorChordsData","cagedMajorChordsJson","cagedMajorChordList","jsonSchemaJson","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"swIA0DeA,MApDf,SAAwBC,GACtB,IAAMC,EAAYD,EAAME,SAClBC,EAAmBF,EAAUG,KAC7BC,EAAgBJ,EAAUK,QAC1BC,EAAeN,EAAUO,OACzBC,EAAaR,EAAUS,KACvBC,EAAOV,EAAUU,KACjBC,EAAiB,CACrBC,MAAO,OAEHC,EAAa,CACjBC,QAASZ,EAAiBY,QAC1BC,aAAcb,EAAiBa,aAC/BC,KAAMd,EAAiBc,KACvBP,KAAMD,EACNH,QAASD,GAGPa,EAAe,GAyBnB,OAxBAT,EAAWU,SAAQ,SAACC,GAClBF,EAAaG,KAAK,4BAAKD,EAAL,WAClB,IAAIE,EAAsB,GAC1Bf,EAAaa,GAAK,GAAGG,UAAUJ,SAAQ,SAACK,GACtC,IAAMC,EAAgB,CACpBC,MAAOF,EAAME,MACbC,QAASH,EAAMG,QACfC,OAAQJ,EAAMI,OACdC,KAAML,EAAMK,KACZC,SAAUN,EAAMM,UAElBR,EAAoBD,KAClB,kBAACU,EAAA,EAAD,CAAKC,GAAI,EAAGC,MAAOrB,GACjB,kBAAC,IAAD,CACEY,MAAOC,EACPX,WAAYA,EACZoB,MAlBG,SAuBXhB,EAAaG,KAAKC,MAIlB,kBAACa,EAAA,EAAD,KACE,4BAAKxB,EAAKyB,OACV,2BAAIzB,EAAK0B,aACT,kBAACC,EAAA,EAAD,KAAMpB,K,iDCvCGqB,MAXf,SAA+BvC,GAC7B,IAAMwC,EAAiBC,KAAKC,MAAMD,KAAKE,UAAU3C,EAAM4C,aACjDC,EAAeJ,KAAKC,MAAMD,KAAKE,UAAU3C,EAAM8C,eAG/CC,GADM,IAAIC,KACKC,QAAQT,GACvBU,EAAQH,EAASF,GAEvB,OADAM,QAAQC,IAAI,aAAcF,EAAOH,EAASM,QACnCN,GC2BMO,MA9Bf,WACE,IAAMC,EAAkBd,KAAKC,MAAMD,KAAKE,UAAUa,IAC5CC,EACJ,kBAAC,EAAD,CAAgBvD,SAAUqD,IAGtBG,EAAkBjB,KAAKC,MAAMD,KAAKE,UAAUgB,IAC5CC,EACJ,kBAAC,EAAD,CAAgB1D,SAAUwD,IAGtBG,EAAuBpB,KAAKC,MAAMD,KAAKE,UAAUmB,IACjDC,EACJ,kBAAC,EAAD,CAAgB7D,SAAU2D,IAQ5B,OALqBtB,EAAsB,CACzCK,WAAYoB,EACZlB,aAAcU,IAId,6BACGC,EACAG,EACAG,IClBQE,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,iCACA,8BACE,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.1a72df4d.chunk.js","sourcesContent":["import React from 'react'\r\nimport Chord from '@tombatossals/react-chords/lib/Chord'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nfunction BasicChordList(props) {\r\n  const totalData = props.jsonData\r\n  const loadedInstrument = totalData.main\r\n  const loadedTunings = totalData.tunings\r\n  const loadedChords = totalData.chords\r\n  const loadedKeys = totalData.keys\r\n  const info = totalData.info\r\n  const tudoPeloIstilo = {\r\n    width: '20%',\r\n  }\r\n  const instrument = {\r\n    strings: loadedInstrument.strings,\r\n    fretsOnChord: loadedInstrument.fretsOnChord,\r\n    name: loadedInstrument.name,\r\n    keys: loadedKeys,\r\n    tunings: loadedTunings,\r\n  }\r\n  const lite = false // defaults to false if omitted\r\n  let listToRender = []\r\n  loadedKeys.forEach((key) => {\r\n    listToRender.push(<h4>{key} chord</h4>)\r\n    let renderedChordsInKey = []\r\n    loadedChords[key][0].positions.forEach((chord) => {\r\n      const chordToRender = {\r\n        frets: chord.frets,\r\n        fingers: chord.fingers,\r\n        barres: chord.barres,\r\n        capo: chord.capo,\r\n        baseFret: chord.baseFret,\r\n      }\r\n      renderedChordsInKey.push(\r\n        <Col md={3} style={tudoPeloIstilo}>\r\n          <Chord\r\n            chord={chordToRender}\r\n            instrument={instrument}\r\n            lite={lite}\r\n          ></Chord>\r\n        </Col>\r\n      )\r\n    })\r\n    listToRender.push(renderedChordsInKey)\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <h1>{info.title}</h1>\r\n      <p>{info.description}</p>\r\n      <Row>{listToRender}</Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default BasicChordList\r\n","import 'react'\r\nimport Ajv from 'ajv'\r\n\r\nfunction JsonChordLibValidator(props) {\r\n  const jsonSchemaData = JSON.parse(JSON.stringify(props.schemaJson))\r\n  const chordLibData = JSON.parse(JSON.stringify(props.chordLibJson))\r\n\r\n  const ajv = new Ajv() // options can be passed, e.g. {allErrors: true}\r\n  const validate = ajv.compile(jsonSchemaData)\r\n  const valid = validate(chordLibData)\r\n  console.log('validacao!', valid, validate.errors)\r\n  return validate\r\n}\r\n\r\nexport default JsonChordLibValidator\r\n","import BasicChordList from './BasicChordList'\r\nimport React from 'react'\r\nimport majorChordsJson from './jsonChordLibs/majorChords.json'\r\nimport minorChordsJson from './jsonChordLibs/minorChords.json'\r\nimport cagedMajorChordsJson from './jsonChordLibs/cagedMajorChords.json'\r\nimport jsonSchemaJson from './jsonChordLibSchemas/jsonChordLibSchema.json'\r\nimport JsonChordLibValidator from './validators/JsonChordLibValidator'\r\n\r\nfunction ChordListsManager() {\r\n  const majorChordsData = JSON.parse(JSON.stringify(majorChordsJson))\r\n  const majorChordList = (\r\n    <BasicChordList jsonData={majorChordsData}></BasicChordList>\r\n  )\r\n\r\n  const minorChordsData = JSON.parse(JSON.stringify(minorChordsJson))\r\n  const minorChordList = (\r\n    <BasicChordList jsonData={minorChordsData}></BasicChordList>\r\n  )\r\n\r\n  const cagedMajorChordsData = JSON.parse(JSON.stringify(cagedMajorChordsJson))\r\n  const cagedMajorChordList = (\r\n    <BasicChordList jsonData={cagedMajorChordsData}></BasicChordList>\r\n  )\r\n\r\n  let validationTest = JsonChordLibValidator({\r\n    schemaJson: jsonSchemaJson,\r\n    chordLibJson: majorChordsJson,\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      {majorChordList}\r\n      {minorChordList}\r\n      {cagedMajorChordList}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChordListsManager\r\n","import React from 'react'\r\nimport './App.css'\r\nimport ChordListsManager from './chordListComponents/ChordListsManager'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header></header>\r\n      <body>\r\n        <ChordListsManager />\r\n      </body>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}